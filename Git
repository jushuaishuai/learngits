Git目前最先进的分布式版本控制系统

1、集中式（CVS、SVN），分布式（Git）;
集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。

2、安装：下载软件选择默认安装安装，安装完成后使用Git Bash配置个人信息
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

3、安装版本库
你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
第一步，创建
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit
第二步，把目录编程可以管理的仓库
git init

4、Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的,所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来

5、编写readme.txt
第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt

第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
[master (root-commit) eaadf4e] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
嫌麻烦不想输入-m "xxx"行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。


6、为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."


7、添加文件到Git仓库，分两步：
	1、使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	2、使用命令git commit -m <message>，完成。

8、使用git log 查看修改历史。如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：

9、首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

10、$ git reset --hard HEAD^ 回到上一个版本。	

11、指定回到未来的某个版本：$ git reset --hard 1094a
$ git reset --hard 65c5（id前几位）；
HEAD is now at 65c556a add nihao

12、GitGit的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL；

13、在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
$ git reflog

小结：
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

14、获取状态 git status

15、所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支

16、暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。
add 就是放在暂存区，最后使用git commit 就可以把暂存区内容提交到分支。

17、现在，假定你已经完全掌握了暂存区的概念。下面，我们要讨论的就是，为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。牛逼

18、git checkout -- file可以丢弃工作区的修改：

19、删除文件：
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"

执行 rm test.txt
第一种情况:的确要把test.txt删掉，那么可以执行
                   git rm test.txt
                   git commit -m "remove test.txt"
                   然后文件就被删掉了
第二种情况:删错文件了，不应该删test.txt，注意这时只执行了rm test.txt，还没有提交，所以可以执行git checkout test.txt将文件恢复。
并不是说执行完git commit -m "remove test.txt"后还能用checkout恢复，commit之后版本库里的文件也没了，自然没办法用checkout恢复，而是要用其他的办法(git reset --hard fileid);

20、添加远程库：
$ git remote add origin git@github.com:michaelliao/learngit.git
从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库

删除远程库：
$ git remote rm origin

21、克隆远程库
登陆GitHub，创建一个新的仓库，名字叫gitskills；
勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件：

22、现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
$ git clone git@github.com:michaelliao/gitskills.git
如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。




